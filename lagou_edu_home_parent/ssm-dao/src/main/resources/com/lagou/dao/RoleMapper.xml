<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lagou.dao.RoleMapper">

<!--    查询所有角色(条件)-->
    <select id="findAllRole" parameterType="role" resultType="role">
        select * from roles
        <where>
            <if test="name != null and name != ''">
                and name = #{name}
            </if>
        </where>
    </select>




<!--    添加角色 void saveRole(Role role);-->
    <insert id="saveRole" parameterType="role">
        insert into roles values(null,#{code},#{name},#{description},#{createdTime},#{updatedTime},
        #{createdBy},#{updatedBy})
    </insert>


<!--    修改角色 void updateRole(Role role);-->
    <update id="updateRole" parameterType="role">
        update roles
        <trim prefix="SET" suffixOverrides=",">
            <if test="code != null and code != ''">
                code = #{code},
            </if>

            <if test="name != null and name != ''">
                name=#{name},
            </if>

            <if test="description != null and description != ''">
                description=#{description},
            </if>

            <if test="updatedTime != null">
                updated_time=#{updatedTime},
            </if>

        </trim>

        <where>
            <if test="id!=null and id != '' ">id=#{id}</if>
        </where>
    </update>




<!--    根据角色ID 查询关联的 菜单信息ID  List<Integer> findMenuByRoleId(Integer roleId);-->
    <select id="findMenuByRoleId" resultType="int" parameterType="int">
        SELECT m.id
FROM roles r INNER JOIN role_menu_relation rm ON r.id = rm.role_id
	     INNER JOIN menu m ON m.id = rm.menu_id WHERE r.id = #{id}
    </select>


<!--根据RoleId 删除在 中间表 与菜单的关联关系 -->
    <delete id="deleteRoleContextMenu" parameterType="int">
        delete  from role_menu_relation where role_id = #{rid}
    </delete>


<!--    为角色分配菜单
            向中间表添加记录，设置角色与菜单的关联关系
-->
    <insert id="roleContextMenu" parameterType="Role_menu_relation">
        insert into role_menu_relation values(null,#{menuId},#{roleId},#{createdTime},#{updatedTime},#{createdBy},#{updatedby})
    </insert>



<!--     根据角色ID 查询当前角色拥有的资源分类信息
        List<ResourceCategory> findResourceCategoryByRoleId(int roleId);-->
<select id="findResourceCategoryByRoleId" parameterType="int" resultType="ResourceCategory">
        SELECT DISTINCT
            rc.*
        FROM
            role_resource_relation rr
        INNER JOIN resource r
        ON rr.resource_id = r.id
        INNER JOIN resource_category rc
        ON r.category_id = rc.id
        WHERE rr.role_id = #{roleId}
</select>


<!--    查询当前角色拥有的资源信息
            List<Resource> findResourceByRoleId(int roleId);
-->
<select id="findResourceByRoleId" resultType="Resource" parameterType="int">
        SELECT
            r.*
        FROM
            role_resource_relation rr
        INNER JOIN resource r
        ON rr.resource_id = r.id
        WHERE rr.role_id = #{roleId}
</select>



<!--  根据RoleId 删除在 中间表 角色与资源的关联关系
            void deleteRoleContextResource(Integer roleId);
-->
    <delete id="deleteRoleContextResource" parameterType="int">
        delete from role_resource_relation where role_id = #{roleId}
    </delete>



    <!--    为角色分配资源
            向中间表添加记录，设置角色与资源的关联关系

                void roleContextResource(Role_resource_relation role_resource_relation);
-->
    <insert id="roleContextResource" parameterType="role_resource_relation">
        insert into role_resource_relation values(null,#{resourceId},#{roleId},#{createdTime},#{updatedTime},#{createdBy},#{updatedBy})
    </insert>





<!--    删除角色  void deleteRole(int roleId);-->
    <delete id="deleteRole" parameterType="int">
        delete from roles where id = #{roleId}
    </delete>
</mapper>